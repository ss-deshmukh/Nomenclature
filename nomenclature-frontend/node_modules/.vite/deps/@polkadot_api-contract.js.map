{
  "version": 3,
  "sources": ["../../@polkadot/api-contract/packageInfo.js", "../../@polkadot/api-contract/packageDetect.js", "../../@polkadot/api-contract/Abi/toV1.js", "../../@polkadot/api-contract/Abi/toV2.js", "../../@polkadot/api-contract/Abi/toV3.js", "../../@polkadot/api-contract/Abi/toV4.js", "../../@polkadot/api-contract/Abi/toLatestCompatible.js", "../../@polkadot/api-contract/Abi/index.js", "../../@polkadot/api-contract/util.js", "../../@polkadot/api-contract/base/Base.js", "../../@polkadot/api-contract/base/util.js", "../../@polkadot/api-contract/base/Contract.js", "../../@polkadot/api-contract/base/Blueprint.js", "../../@polkadot/api-contract/base/Code.js", "../../@polkadot/api-contract/promise/index.js", "../../@polkadot/api-contract/rx/index.js"],
  "sourcesContent": ["export const packageInfo = { name: '@polkadot/api-contract', path: (import.meta && import.meta.url) ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf('/') + 1) : 'auto', type: 'esm', version: '10.13.1' };\n", "import { packageInfo as apiInfo } from '@polkadot/api/packageInfo';\nimport { packageInfo as typesInfo } from '@polkadot/types/packageInfo';\nimport { detectPackage } from '@polkadot/util';\nimport { packageInfo } from './packageInfo.js';\ndetectPackage(packageInfo, null, [apiInfo, typesInfo]);\n", "import { convertSiV0toV1 } from '@polkadot/types';\nimport { objectSpread } from '@polkadot/util';\nfunction v0ToV1Names(all) {\n    return all.map((e) => objectSpread({}, e, {\n        name: Array.isArray(e.name)\n            ? e.name\n            : [e.name]\n    }));\n}\nexport function v0ToV1(registry, v0) {\n    if (!v0.metadataVersion.length) {\n        throw new Error('Invalid format for V0 (detected) contract metadata');\n    }\n    return registry.createType('ContractMetadataV1', objectSpread({}, v0, {\n        spec: objectSpread({}, v0.spec, {\n            constructors: v0ToV1Names(v0.spec.constructors),\n            messages: v0ToV1Names(v0.spec.messages)\n        }),\n        types: convertSiV0toV1(registry, v0.types)\n    }));\n}\n", "import { objectSpread } from '@polkadot/util';\nconst ARG_TYPES = {\n    ContractConstructorSpec: 'ContractMessageParamSpecV2',\n    ContractEventSpec: 'ContractEventParamSpecV2',\n    ContractMessageSpec: 'ContractMessageParamSpecV2'\n};\nfunction v1ToV2Label(entry) {\n    return objectSpread({}, entry, {\n        label: Array.isArray(entry.name)\n            ? entry.name.join('::')\n            : entry.name\n    });\n}\nfunction v1ToV2Labels(registry, outType, all) {\n    return all.map((e) => registry.createType(`${outType}V2`, objectSpread(v1ToV2Label(e), {\n        args: e.args.map((a) => registry.createType(ARG_TYPES[outType], v1ToV2Label(a)))\n    })));\n}\nexport function v1ToV2(registry, v1) {\n    return registry.createType('ContractMetadataV2', objectSpread({}, v1, {\n        spec: objectSpread({}, v1.spec, {\n            constructors: v1ToV2Labels(registry, 'ContractConstructorSpec', v1.spec.constructors),\n            events: v1ToV2Labels(registry, 'ContractEventSpec', v1.spec.events),\n            messages: v1ToV2Labels(registry, 'ContractMessageSpec', v1.spec.messages)\n        })\n    }));\n}\n", "import { objectSpread } from '@polkadot/util';\nexport function v2ToV3(registry, v2) {\n    return registry.createType('ContractMetadataV3', objectSpread({}, v2, {\n        spec: objectSpread({}, v2.spec, {\n            constructors: v2.spec.constructors.map((c) => \n            // V3 introduces the payable flag on constructors, for <V3, it is always true\n            registry.createType('ContractConstructorSpecV3', objectSpread({}, c, { payable: true })))\n        })\n    }));\n}\n", "import { objectSpread } from '@polkadot/util';\nexport function v3ToV4(registry, v3) {\n    return registry.createType('ContractMetadataV4', objectSpread({}, v3, {\n        spec: objectSpread({}, v3.spec, {\n            constructors: v3.spec.constructors.map((c) => registry.createType('ContractConstructorSpecV4', objectSpread({}, c))),\n            messages: v3.spec.messages.map((m) => registry.createType('ContractMessageSpecV3', objectSpread({}, m)))\n        }),\n        version: registry.createType('Text', '4')\n    }));\n}\n", "import { v0ToV1 } from './toV1.js';\nimport { v1ToV2 } from './toV2.js';\nimport { v2ToV3 } from './toV3.js';\nimport { v3ToV4 } from './toV4.js';\nexport const enumVersions = ['V5', 'V4', 'V3', 'V2', 'V1'];\nfunction createConverter(next, step) {\n    return (registry, input) => next(registry, step(registry, input));\n}\nexport function v5ToLatestCompatible(_registry, v5) {\n    return v5;\n}\nexport function v4ToLatestCompatible(_registry, v4) {\n    return v4;\n}\nexport const v3ToLatestCompatible = /*#__PURE__*/ createConverter(v4ToLatestCompatible, v3ToV4);\nexport const v2ToLatestCompatible = /*#__PURE__*/ createConverter(v3ToLatestCompatible, v2ToV3);\nexport const v1ToLatestCompatible = /*#__PURE__*/ createConverter(v2ToLatestCompatible, v1ToV2);\nexport const v0ToLatestCompatible = /*#__PURE__*/ createConverter(v1ToLatestCompatible, v0ToV1);\nexport const convertVersions = [\n    ['V5', v5ToLatestCompatible],\n    ['V4', v4ToLatestCompatible],\n    ['V3', v3ToLatestCompatible],\n    ['V2', v2ToLatestCompatible],\n    ['V1', v1ToLatestCompatible],\n    ['V0', v0ToLatestCompatible]\n];\n", "import { Option, TypeRegistry } from '@polkadot/types';\nimport { TypeDefInfo } from '@polkadot/types-create';\nimport { assertReturn, compactAddLength, compactStripLength, isBn, isNumber, isObject, isString, isUndefined, logger, stringCamelCase, stringify, u8aConcat, u8aToHex } from '@polkadot/util';\nimport { convertVersions, enumVersions } from './toLatestCompatible.js';\nconst l = logger('Abi');\nconst PRIMITIVE_ALWAYS = ['AccountId', 'AccountIndex', 'Address', 'Balance'];\nfunction findMessage(list, messageOrId) {\n    const message = isNumber(messageOrId)\n        ? list[messageOrId]\n        : isString(messageOrId)\n            ? list.find(({ identifier }) => [identifier, stringCamelCase(identifier)].includes(messageOrId.toString()))\n            : messageOrId;\n    return assertReturn(message, () => `Attempted to call an invalid contract interface, ${stringify(messageOrId)}`);\n}\nfunction getMetadata(registry, json) {\n    // this is for V1, V2, V3\n    const vx = enumVersions.find((v) => isObject(json[v]));\n    // this was added in V4\n    const jsonVersion = json.version;\n    if (!vx && jsonVersion && !enumVersions.find((v) => v === `V${jsonVersion}`)) {\n        throw new Error(`Unable to handle version ${jsonVersion}`);\n    }\n    const metadata = registry.createType('ContractMetadata', vx\n        ? { [vx]: json[vx] }\n        : jsonVersion\n            ? { [`V${jsonVersion}`]: json }\n            : { V0: json });\n    const converter = convertVersions.find(([v]) => metadata[`is${v}`]);\n    if (!converter) {\n        throw new Error(`Unable to convert ABI with version ${metadata.type} to a supported version`);\n    }\n    const upgradedMetadata = converter[1](registry, metadata[`as${converter[0]}`]);\n    return upgradedMetadata;\n}\nfunction parseJson(json, chainProperties) {\n    const registry = new TypeRegistry();\n    const info = registry.createType('ContractProjectInfo', json);\n    const metadata = getMetadata(registry, json);\n    const lookup = registry.createType('PortableRegistry', { types: metadata.types }, true);\n    // attach the lookup to the registry - now the types are known\n    registry.setLookup(lookup);\n    if (chainProperties) {\n        registry.setChainProperties(chainProperties);\n    }\n    // warm-up the actual type, pre-use\n    lookup.types.forEach(({ id }) => lookup.getTypeDef(id));\n    return [json, registry, metadata, info];\n}\n/**\n * @internal\n * Determines if the given input value is a ContractTypeSpec\n */\nfunction isTypeSpec(value) {\n    return !!value && value instanceof Map && !isUndefined(value.type) && !isUndefined(value.displayName);\n}\n/**\n * @internal\n * Determines if the given input value is an Option\n */\nfunction isOption(value) {\n    return !!value && value instanceof Option;\n}\nexport class Abi {\n    events;\n    constructors;\n    info;\n    json;\n    messages;\n    metadata;\n    registry;\n    environment = new Map();\n    constructor(abiJson, chainProperties) {\n        [this.json, this.registry, this.metadata, this.info] = parseJson(isString(abiJson)\n            ? JSON.parse(abiJson)\n            : abiJson, chainProperties);\n        this.constructors = this.metadata.spec.constructors.map((spec, index) => this.__internal__createMessage(spec, index, {\n            isConstructor: true,\n            isDefault: spec.default.isTrue,\n            isPayable: spec.payable.isTrue,\n            returnType: spec.returnType.isSome\n                ? this.registry.lookup.getTypeDef(spec.returnType.unwrap().type)\n                : null\n        }));\n        this.events = this.metadata.spec.events.map((_, index) => this.__internal__createEvent(index));\n        this.messages = this.metadata.spec.messages.map((spec, index) => this.__internal__createMessage(spec, index, {\n            isDefault: spec.default.isTrue,\n            isMutating: spec.mutates.isTrue,\n            isPayable: spec.payable.isTrue,\n            returnType: spec.returnType.isSome\n                ? this.registry.lookup.getTypeDef(spec.returnType.unwrap().type)\n                : null\n        }));\n        // NOTE See the rationale for having Option<...> values in the actual\n        // ContractEnvironmentV4 structure definition in interfaces/contractsAbi\n        // (Due to conversions, the fields may not exist)\n        for (const [key, opt] of this.metadata.spec.environment.entries()) {\n            if (isOption(opt)) {\n                if (opt.isSome) {\n                    const value = opt.unwrap();\n                    if (isBn(value)) {\n                        this.environment.set(key, value);\n                    }\n                    else if (isTypeSpec(value)) {\n                        this.environment.set(key, this.registry.lookup.getTypeDef(value.type));\n                    }\n                    else {\n                        throw new Error(`Invalid environment definition for ${key}:: Expected either Number or ContractTypeSpec`);\n                    }\n                }\n            }\n            else {\n                throw new Error(`Expected Option<*> definition for ${key} in ContractEnvironment`);\n            }\n        }\n    }\n    /**\n     * Warning: Unstable API, bound to change\n     */\n    decodeEvent(record) {\n        switch (this.metadata.version.toString()) {\n            // earlier version are hoisted to v4\n            case '4':\n                return this.__internal__decodeEventV4(record);\n            // Latest\n            default:\n                return this.__internal__decodeEventV5(record);\n        }\n    }\n    __internal__decodeEventV5 = (record) => {\n        // Find event by first topic, which potentially is the signature_topic\n        const signatureTopic = record.topics[0];\n        const data = record.event.data[1];\n        if (signatureTopic) {\n            const event = this.events.find((e) => e.signatureTopic !== undefined && e.signatureTopic !== null && e.signatureTopic === signatureTopic.toHex());\n            // Early return if event found by signature topic\n            if (event) {\n                return event.fromU8a(data);\n            }\n        }\n        // If no event returned yet, it might be anonymous\n        const amountOfTopics = record.topics.length;\n        const potentialEvents = this.events.filter((e) => {\n            // event can't have a signature topic\n            if (e.signatureTopic !== null && e.signatureTopic !== undefined) {\n                return false;\n            }\n            // event should have same amount of indexed fields as emitted topics\n            const amountIndexed = e.args.filter((a) => a.indexed).length;\n            if (amountIndexed !== amountOfTopics) {\n                return false;\n            }\n            // If all conditions met, it's a potential event\n            return true;\n        });\n        if (potentialEvents.length === 1) {\n            return potentialEvents[0].fromU8a(data);\n        }\n        throw new Error('Unable to determine event');\n    };\n    __internal__decodeEventV4 = (record) => {\n        const data = record.event.data[1];\n        const index = data[0];\n        const event = this.events[index];\n        if (!event) {\n            throw new Error(`Unable to find event with index ${index}`);\n        }\n        return event.fromU8a(data.subarray(1));\n    };\n    /**\n     * Warning: Unstable API, bound to change\n     */\n    decodeConstructor(data) {\n        return this.__internal__decodeMessage('message', this.constructors, data);\n    }\n    /**\n     * Warning: Unstable API, bound to change\n     */\n    decodeMessage(data) {\n        return this.__internal__decodeMessage('message', this.messages, data);\n    }\n    findConstructor(constructorOrId) {\n        return findMessage(this.constructors, constructorOrId);\n    }\n    findMessage(messageOrId) {\n        return findMessage(this.messages, messageOrId);\n    }\n    __internal__createArgs = (args, spec) => {\n        return args.map(({ label, type }, index) => {\n            try {\n                if (!isObject(type)) {\n                    throw new Error('Invalid type definition found');\n                }\n                const displayName = type.displayName.length\n                    ? type.displayName[type.displayName.length - 1].toString()\n                    : undefined;\n                const camelName = stringCamelCase(label);\n                if (displayName && PRIMITIVE_ALWAYS.includes(displayName)) {\n                    return {\n                        name: camelName,\n                        type: {\n                            info: TypeDefInfo.Plain,\n                            type: displayName\n                        }\n                    };\n                }\n                const typeDef = this.registry.lookup.getTypeDef(type.type);\n                return {\n                    name: camelName,\n                    type: displayName && !typeDef.type.startsWith(displayName)\n                        ? { displayName, ...typeDef }\n                        : typeDef\n                };\n            }\n            catch (error) {\n                l.error(`Error expanding argument ${index} in ${stringify(spec)}`);\n                throw error;\n            }\n        });\n    };\n    __internal__createMessageParams = (args, spec) => {\n        return this.__internal__createArgs(args, spec);\n    };\n    __internal__createEventParams = (args, spec) => {\n        const params = this.__internal__createArgs(args, spec);\n        return params.map((p, index) => ({ ...p, indexed: args[index].indexed.toPrimitive() }));\n    };\n    __internal__createEvent = (index) => {\n        // TODO TypeScript would narrow this type to the correct version,\n        // but version is `Text` so I need to call `toString()` here,\n        // which breaks the type inference.\n        switch (this.metadata.version.toString()) {\n            case '4':\n                return this.__internal__createEventV4(this.metadata.spec.events[index], index);\n            default:\n                return this.__internal__createEventV5(this.metadata.spec.events[index], index);\n        }\n    };\n    __internal__createEventV5 = (spec, index) => {\n        const args = this.__internal__createEventParams(spec.args, spec);\n        const event = {\n            args,\n            docs: spec.docs.map((d) => d.toString()),\n            fromU8a: (data) => ({\n                args: this.__internal__decodeArgs(args, data),\n                event\n            }),\n            identifier: [spec.module_path, spec.label].join('::'),\n            index,\n            signatureTopic: spec.signature_topic.isSome ? spec.signature_topic.unwrap().toHex() : null\n        };\n        return event;\n    };\n    __internal__createEventV4 = (spec, index) => {\n        const args = this.__internal__createEventParams(spec.args, spec);\n        const event = {\n            args,\n            docs: spec.docs.map((d) => d.toString()),\n            fromU8a: (data) => ({\n                args: this.__internal__decodeArgs(args, data),\n                event\n            }),\n            identifier: spec.label.toString(),\n            index\n        };\n        return event;\n    };\n    __internal__createMessage = (spec, index, add = {}) => {\n        const args = this.__internal__createMessageParams(spec.args, spec);\n        const identifier = spec.label.toString();\n        const message = {\n            ...add,\n            args,\n            docs: spec.docs.map((d) => d.toString()),\n            fromU8a: (data) => ({\n                args: this.__internal__decodeArgs(args, data),\n                message\n            }),\n            identifier,\n            index,\n            isDefault: spec.default.isTrue,\n            method: stringCamelCase(identifier),\n            path: identifier.split('::').map((s) => stringCamelCase(s)),\n            selector: spec.selector,\n            toU8a: (params) => this.__internal__encodeMessageArgs(spec, args, params)\n        };\n        return message;\n    };\n    __internal__decodeArgs = (args, data) => {\n        // for decoding we expect the input to be just the arg data, no selectors\n        // no length added (this allows use with events as well)\n        let offset = 0;\n        return args.map(({ type: { lookupName, type } }) => {\n            const value = this.registry.createType(lookupName || type, data.subarray(offset));\n            offset += value.encodedLength;\n            return value;\n        });\n    };\n    __internal__decodeMessage = (type, list, data) => {\n        const [, trimmed] = compactStripLength(data);\n        const selector = trimmed.subarray(0, 4);\n        const message = list.find((m) => m.selector.eq(selector));\n        if (!message) {\n            throw new Error(`Unable to find ${type} with selector ${u8aToHex(selector)}`);\n        }\n        return message.fromU8a(trimmed.subarray(4));\n    };\n    __internal__encodeMessageArgs = ({ label, selector }, args, data) => {\n        if (data.length !== args.length) {\n            throw new Error(`Expected ${args.length} arguments to contract message '${label.toString()}', found ${data.length}`);\n        }\n        return compactAddLength(u8aConcat(this.registry.createType('ContractSelector', selector).toU8a(), ...args.map(({ type: { lookupName, type } }, index) => this.registry.createType(lookupName || type, data[index]).toU8a())));\n    };\n}\n", "export function applyOnEvent(result, types, fn) {\n    if (result.isInBlock || result.isFinalized) {\n        const records = result.filterRecords('contracts', types);\n        if (records.length) {\n            return fn(records);\n        }\n    }\n    return undefined;\n}\n", "import { isFunction } from '@polkadot/util';\nimport { Abi } from '../Abi/index.js';\nexport class Base {\n    abi;\n    api;\n    _decorateMethod;\n    _isWeightV1;\n    constructor(api, abi, decorateMethod) {\n        if (!api || !api.isConnected || !api.tx) {\n            throw new Error('Your API has not been initialized correctly and is not connected to a chain');\n        }\n        else if (!api.tx.contracts || !isFunction(api.tx.contracts.instantiateWithCode) || api.tx.contracts.instantiateWithCode.meta.args.length !== 6) {\n            throw new Error('The runtime does not expose api.tx.contracts.instantiateWithCode with storageDepositLimit');\n        }\n        else if (!api.call.contractsApi || !isFunction(api.call.contractsApi.call)) {\n            throw new Error('Your runtime does not expose the api.call.contractsApi.call runtime interfaces');\n        }\n        this.abi = abi instanceof Abi\n            ? abi\n            : new Abi(abi, api.registry.getChainProperties());\n        this.api = api;\n        this._decorateMethod = decorateMethod;\n        this._isWeightV1 = !api.registry.createType('Weight').proofSize;\n    }\n    get registry() {\n        return this.api.registry;\n    }\n}\n", "import { Bytes } from '@polkadot/types';\nimport { bnToBn, compactAddLength, u8aToU8a } from '@polkadot/util';\nimport { randomAsU8a } from '@polkadot/util-crypto';\nexport const EMPTY_SALT = new Uint8Array();\nexport function withMeta(meta, creator) {\n    creator.meta = meta;\n    return creator;\n}\nexport function createBluePrintTx(meta, fn) {\n    return withMeta(meta, (options, ...params) => fn(options, params));\n}\nexport function createBluePrintWithId(fn) {\n    return (constructorOrId, options, ...params) => fn(constructorOrId, options, params);\n}\nexport function encodeSalt(salt = randomAsU8a()) {\n    return salt instanceof Bytes\n        ? salt\n        : salt?.length\n            ? compactAddLength(u8aToU8a(salt))\n            : EMPTY_SALT;\n}\nexport function convertWeight(weight) {\n    const [refTime, proofSize] = isWeightV2(weight)\n        ? [weight.refTime.toBn(), weight.proofSize.toBn()]\n        : [bnToBn(weight), undefined];\n    return {\n        v1Weight: refTime,\n        v2Weight: { proofSize, refTime }\n    };\n}\nexport function isWeightV2(weight) {\n    return !!weight.proofSize;\n}\n", "import { map } from 'rxjs';\nimport { SubmittableResult } from '@polkadot/api';\nimport { BN, BN_HUNDRED, BN_ONE, BN_ZERO, isUndefined, logger } from '@polkadot/util';\nimport { applyOnEvent } from '../util.js';\nimport { Base } from './Base.js';\nimport { convertWeight, withMeta } from './util.js';\nconst MAX_CALL_GAS = new BN(5000000000000).isub(BN_ONE);\nconst l = logger('Contract');\nfunction createQuery(meta, fn) {\n    return withMeta(meta, (origin, options, ...params) => fn(origin, options, params));\n}\nfunction createTx(meta, fn) {\n    return withMeta(meta, (options, ...params) => fn(options, params));\n}\nexport class ContractSubmittableResult extends SubmittableResult {\n    contractEvents;\n    constructor(result, contractEvents) {\n        super(result);\n        this.contractEvents = contractEvents;\n    }\n}\nexport class Contract extends Base {\n    /**\n     * @description The on-chain address for this contract\n     */\n    address;\n    __internal__query = {};\n    __internal__tx = {};\n    constructor(api, abi, address, decorateMethod) {\n        super(api, abi, decorateMethod);\n        this.address = this.registry.createType('AccountId', address);\n        this.abi.messages.forEach((m) => {\n            if (isUndefined(this.__internal__tx[m.method])) {\n                this.__internal__tx[m.method] = createTx(m, (o, p) => this.__internal__exec(m, o, p));\n            }\n            if (isUndefined(this.__internal__query[m.method])) {\n                this.__internal__query[m.method] = createQuery(m, (f, o, p) => this.__internal__read(m, o, p).send(f));\n            }\n        });\n    }\n    get query() {\n        return this.__internal__query;\n    }\n    get tx() {\n        return this.__internal__tx;\n    }\n    __internal__getGas = (_gasLimit, isCall = false) => {\n        const weight = convertWeight(_gasLimit);\n        if (weight.v1Weight.gt(BN_ZERO)) {\n            return weight;\n        }\n        return convertWeight(isCall\n            ? MAX_CALL_GAS\n            : convertWeight(this.api.consts.system.blockWeights\n                ? this.api.consts.system.blockWeights.maxBlock\n                : this.api.consts.system['maximumBlockWeight']).v1Weight.muln(64).div(BN_HUNDRED));\n    };\n    __internal__exec = (messageOrId, { gasLimit = BN_ZERO, storageDepositLimit = null, value = BN_ZERO }, params) => {\n        return this.api.tx.contracts.call(this.address, value, \n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore jiggle v1 weights, metadata points to latest\n        this._isWeightV1\n            ? convertWeight(gasLimit).v1Weight\n            : convertWeight(gasLimit).v2Weight, storageDepositLimit, this.abi.findMessage(messageOrId).toU8a(params)).withResultTransform((result) => \n        // ContractEmitted is the current generation, ContractExecution is the previous generation\n        new ContractSubmittableResult(result, applyOnEvent(result, ['ContractEmitted', 'ContractExecution'], (records) => records\n            .map((record) => {\n            try {\n                return this.abi.decodeEvent(record);\n            }\n            catch (error) {\n                l.error(`Unable to decode contract event: ${error.message}`);\n                return null;\n            }\n        })\n            .filter((decoded) => !!decoded))));\n    };\n    __internal__read = (messageOrId, { gasLimit = BN_ZERO, storageDepositLimit = null, value = BN_ZERO }, params) => {\n        const message = this.abi.findMessage(messageOrId);\n        return {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            send: this._decorateMethod((origin) => this.api.rx.call.contractsApi.call(origin, this.address, value, \n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore jiggle v1 weights, metadata points to latest\n            this._isWeightV1\n                ? this.__internal__getGas(gasLimit, true).v1Weight\n                : this.__internal__getGas(gasLimit, true).v2Weight, storageDepositLimit, message.toU8a(params)).pipe(map(({ debugMessage, gasConsumed, gasRequired, result, storageDeposit }) => ({\n                debugMessage,\n                gasConsumed,\n                gasRequired: gasRequired && !convertWeight(gasRequired).v1Weight.isZero()\n                    ? gasRequired\n                    : gasConsumed,\n                output: result.isOk && message.returnType\n                    ? this.abi.registry.createTypeUnsafe(message.returnType.lookupName || message.returnType.type, [result.asOk.data.toU8a(true)], { isPedantic: true })\n                    : null,\n                result,\n                storageDeposit\n            }))))\n        };\n    };\n}\nexport function extendContract(type, decorateMethod) {\n    return class extends Contract {\n        static __ContractType = type;\n        constructor(api, abi, address) {\n            super(api, abi, address, decorateMethod);\n        }\n    };\n}\n", "import { SubmittableResult } from '@polkadot/api';\nimport { BN_ZERO, isUndefined } from '@polkadot/util';\nimport { applyOnEvent } from '../util.js';\nimport { Base } from './Base.js';\nimport { Contract } from './Contract.js';\nimport { convertWeight, createBluePrintTx, encodeSalt } from './util.js';\nexport class BlueprintSubmittableResult extends SubmittableResult {\n    contract;\n    constructor(result, contract) {\n        super(result);\n        this.contract = contract;\n    }\n}\nexport class Blueprint extends Base {\n    /**\n     * @description The on-chain code hash for this blueprint\n     */\n    codeHash;\n    __internal__tx = {};\n    constructor(api, abi, codeHash, decorateMethod) {\n        super(api, abi, decorateMethod);\n        this.codeHash = this.registry.createType('Hash', codeHash);\n        this.abi.constructors.forEach((c) => {\n            if (isUndefined(this.__internal__tx[c.method])) {\n                this.__internal__tx[c.method] = createBluePrintTx(c, (o, p) => this.__internal__deploy(c, o, p));\n            }\n        });\n    }\n    get tx() {\n        return this.__internal__tx;\n    }\n    __internal__deploy = (constructorOrId, { gasLimit = BN_ZERO, salt, storageDepositLimit = null, value = BN_ZERO }, params) => {\n        return this.api.tx.contracts.instantiate(value, \n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore jiggle v1 weights, metadata points to latest\n        this._isWeightV1\n            ? convertWeight(gasLimit).v1Weight\n            : convertWeight(gasLimit).v2Weight, storageDepositLimit, this.codeHash, this.abi.findConstructor(constructorOrId).toU8a(params), encodeSalt(salt)).withResultTransform((result) => new BlueprintSubmittableResult(result, applyOnEvent(result, ['Instantiated'], ([record]) => new Contract(this.api, this.abi, record.event.data[1], this._decorateMethod))));\n    };\n}\nexport function extendBlueprint(type, decorateMethod) {\n    return class extends Blueprint {\n        static __BlueprintType = type;\n        constructor(api, abi, codeHash) {\n            super(api, abi, codeHash, decorateMethod);\n        }\n    };\n}\n", "import { SubmittableResult } from '@polkadot/api';\nimport { BN_ZERO, compactAddLength, isRiscV, isUndefined, isWasm, u8aToU8a } from '@polkadot/util';\nimport { applyOnEvent } from '../util.js';\nimport { Base } from './Base.js';\nimport { Blueprint } from './Blueprint.js';\nimport { Contract } from './Contract.js';\nimport { convertWeight, createBluePrintTx, encodeSalt } from './util.js';\nexport class CodeSubmittableResult extends SubmittableResult {\n    blueprint;\n    contract;\n    constructor(result, blueprint, contract) {\n        super(result);\n        this.blueprint = blueprint;\n        this.contract = contract;\n    }\n}\nfunction isValidCode(code) {\n    return isWasm(code) || isRiscV(code);\n}\nexport class Code extends Base {\n    code;\n    __internal__tx = {};\n    constructor(api, abi, wasm, decorateMethod) {\n        super(api, abi, decorateMethod);\n        this.code = isValidCode(this.abi.info.source.wasm)\n            ? this.abi.info.source.wasm\n            : u8aToU8a(wasm);\n        if (!isValidCode(this.code)) {\n            throw new Error('Invalid code provided');\n        }\n        this.abi.constructors.forEach((c) => {\n            if (isUndefined(this.__internal__tx[c.method])) {\n                this.__internal__tx[c.method] = createBluePrintTx(c, (o, p) => this.__internal__instantiate(c, o, p));\n            }\n        });\n    }\n    get tx() {\n        return this.__internal__tx;\n    }\n    __internal__instantiate = (constructorOrId, { gasLimit = BN_ZERO, salt, storageDepositLimit = null, value = BN_ZERO }, params) => {\n        return this.api.tx.contracts.instantiateWithCode(value, \n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore jiggle v1 weights, metadata points to latest\n        this._isWeightV1\n            ? convertWeight(gasLimit).v1Weight\n            : convertWeight(gasLimit).v2Weight, storageDepositLimit, compactAddLength(this.code), this.abi.findConstructor(constructorOrId).toU8a(params), encodeSalt(salt)).withResultTransform((result) => new CodeSubmittableResult(result, ...(applyOnEvent(result, ['CodeStored', 'Instantiated'], (records) => records.reduce(([blueprint, contract], { event }) => this.api.events.contracts.Instantiated.is(event)\n            ? [blueprint, new Contract(this.api, this.abi, event.data[1], this._decorateMethod)]\n            : this.api.events.contracts.CodeStored.is(event)\n                ? [new Blueprint(this.api, this.abi, event.data[0], this._decorateMethod), contract]\n                : [blueprint, contract], [undefined, undefined])) || [undefined, undefined])));\n    };\n}\nexport function extendCode(type, decorateMethod) {\n    return class extends Code {\n        static __CodeType = type;\n        constructor(api, abi, wasm) {\n            super(api, abi, wasm, decorateMethod);\n        }\n    };\n}\n", "import { toPromiseMethod } from '@polkadot/api';\nimport { Blueprint, Code, Contract } from '../base/index.js';\nexport class BlueprintPromise extends Blueprint {\n    constructor(api, abi, codeHash) {\n        super(api, abi, codeHash, toPromiseMethod);\n    }\n}\nexport class CodePromise extends Code {\n    constructor(api, abi, wasm) {\n        super(api, abi, wasm, toPromiseMethod);\n    }\n}\nexport class ContractPromise extends Contract {\n    constructor(api, abi, address) {\n        super(api, abi, address, toPromiseMethod);\n    }\n}\n", "import { toRxMethod } from '@polkadot/api';\nimport { Blueprint, Code, Contract } from '../base/index.js';\nexport class BlueprintRx extends Blueprint {\n    constructor(api, abi, codeHash) {\n        super(api, abi, codeHash, toRxMethod);\n    }\n}\nexport class CodeRx extends Code {\n    constructor(api, abi, wasm) {\n        super(api, abi, wasm, toRxMethod);\n    }\n}\nexport class ContractRx extends Contract {\n    constructor(api, abi, address) {\n        super(api, abi, address, toRxMethod);\n    }\n}\n"],
  "mappings": "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",
  "names": ["packageInfo", "packageInfo", "BN", "l"]
}
